{"version":3,"sources":["Form.js","List.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","useState","task","setTask","onFilterClicked","idFilter","class","className","type","onChange","e","target","value","on","role","aria-label","onClick","console","log","onTaskCeate","disabled","trim","data-toggle","name","id","checked","List","taskEdit","setTaskEdit","onEditTaskChange","taskSave","onTaskSave","toDos","map","el","filter","isDone","key","onTaskDone","onTaskDelete","Footer","todoTask","doneTask","allTask","toDosInit","Math","random","objToday","Date","today","getDay","getDate","getMonth","getFullYear","App","setToDOS","setAllTask","setTodoTask","setDoneTask","setFilter","updateNumberOfTask","todoArray","length","counterToDo","counterDone","updatedTodos","push","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fe76b0ea.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport './App.css';\n\nfunction Form(props) {\n    const [task, setTask] = useState('')\n    const addTask = () => {\n        console.log(task);\n        props.onTaskCeate(task);\n        setTask('');\n    }\n    const onFilterClicked = (idFilter)=>{\n        props.onFilterClicked(idFilter);\n    }\n\n    return (\n\n        <div class=\"container\">\n\n            <div className=\"input-group mb-3\">\n\n                <input class=\"form-control\" type=\"text\" onChange={e => setTask(e.target.value)} on value={task}/>\n                <div class=\"btn-group\" role=\"group\" aria-label=\"Basic example\">\n                    <button className=\"btn btn-outline-secondary\" onClick={addTask} disabled={task.trim() === ''}>‚ûï\n                    </button>\n                </div>\n                {/*<div className=\"btn-group\" role=\"group\" aria-label=\"Basic example\">*/}\n                {/*    <button className=\"btn btn-outline-secondary\"  >üíö‚ù§Ô∏è*/}\n                {/*    </button>*/}\n                {/*    <button className=\"btn btn-outline-secondary\">‚ù§Ô∏è*/}\n                {/*    </button>*/}\n                {/*    <button className=\"btn btn-outline-secondary\"  >üíö*/}\n                {/*    </button>*/}\n\n                {/*</div>*/}\n                <div className=\"btn-group btn-group-toggle\" data-toggle=\"buttons\">\n                    <label className=\"btn btn-outline-secondary active\">\n                        <input type=\"radio\" name=\"options\" id=\"option1\" checked onClick = {()=>onFilterClicked(0) }/>üíö‚ù§Ô∏è\n                    </label>\n                    <label className=\"btn btn-outline-secondary\">\n                        <input type=\"radio\" name=\"options\" id=\"option2\"  onClick = {()=>onFilterClicked(1)}/>‚ù§Ô∏è\n                    </label>\n                    <label className=\"btn btn-outline-secondary\">\n                        <input type=\"radio\" name=\"options\" id=\"option3\"  onClick = {()=>onFilterClicked(2)}/>üíö\n                    </label>\n                </div>\n\n            </div>\n\n        </div>\n    );\n}\n\n\nexport default Form;\n","import React, {useState} from 'react';\nimport \"./App.css\"\n\n\nfunction List(props) {\n\n    const deleteTask = (id) => {\n\n        console.log('Delete ' + id);\n        props.onTaskDelete(id)\n\n    }\n    const onTaskDone = (id) => {\n        console.log('Done ' + id);\n        props.onTaskDone(id);\n\n    }\n    const [taskEdit, setTaskEdit] = useState({})\n    const editMode = (task) => {\n\n        setTaskEdit(task);\n        console.log(task);\n    }\n    const onEditTaskChange = (e) => {\n        console.log('OnChange ' + e.target.value);\n        setTaskEdit({...taskEdit, name: e.target.value});\n    }\n    const taskSave = () => {\n        props.onTaskSave(taskEdit);\n        setTaskEdit({});\n    }\n\n    return (\n        <div class=\"container\">\n            <ul  class=\"list-group\">\n                {\n                    props.toDos.map((el) =>\n                        props.filter===0 || (props.filter === 1 && el.isDone === false) || (props.filter ===2 && el.isDone === true)\n                        ?\n                        <li key={el.id} class=\"list-group-item\">\n\n                        <div className=\"input-group\">\n                            {\n                                taskEdit.id === el.id && el.isDone === false\n                                    ? <>\n                                        <input class=\"form-control\" type=\"text\" value={taskEdit.name}\n                                               onChange={onEditTaskChange}/>\n\n                                        <div class=\"btn-group\" role=\"group\" aria-label=\"Basic example\">\n                                            <button class=\"btn btn-outline-secondary \" onClick={taskSave}\n                                                    disabled={!taskEdit.name.trim()}>üíæ\n                                            </button>\n                                        </div>\n                                    </>\n                                    : <span class= {el.isDone === false ? \"form-control\": \"form-control c\"}  onClick={() => editMode(el)}>{el.name}</span>\n\n\n                            }\n                            <div class=\"btn-group\" role=\"group\" aria-label=\"Basic example\">\n                                <button class=\"btn btn-outline-secondary\"\n                                        onClick={() => onTaskDone(el.id)}>{el.isDone ? 'üíö' : '‚ù§Ô∏è'}</button>\n\n                                <button class=\"btn btn-outline-secondary\"\n                                        onClick={() => deleteTask(el.id)}>‚ùå\n                                </button>\n                            </div>\n                        </div>\n\n                        {/*</div>*/}\n                        {/*// <button onClick = {()=> onTaskDone(el.id)}>{el.isDone? '‚úîÔ∏è' :  '‚ùóÔ∏è' }</button>*/}\n\n                    </li>\n                    :\"\")\n                }\n            </ul>\n        </div>\n    );\n}\n\nexport default List;\n","import React, {useState} from 'react';\nimport './App.css';\n\nfunction Footer(props) {\n\n    return (\n        <div class=\"container c\">\n            <div class=\"row\">\n                <div class = \"col\">\n                    We need to do: {props.todoTask}\n                </div>\n                <div className=\"col\">\n                    Done: {props.doneTask}\n                </div>\n                <div className=\"col\">\n                    Total: {props.allTask}\n                </div>\n            </div>\n\n\n        </div>\n    );\n}\n\n\nexport default Footer;\n","import React, {useState} from 'react';\nimport './App.css';\nimport Form from \"./Form\";\nimport List from \"./List\";\nimport Footer from \"./Footer\";\n\nconst toDosInit = [{id: Math.random(), name: \"To Do Home Work\", isDone: false},\n    {id: Math.random(), name: \"To Do Exercise\", isDone: true},\n    {id: Math.random(), name: \"To call mom\", isDone: false},\n\n\n]\n\n\nconst objToday = new Date();\n\nconst weekday = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\nconst dayOfWeek = weekday[objToday.getDay()];\nconst dayOfMonth = (objToday.getDate() < 10) ? '0' + objToday.getDate() : objToday.getDate();\nconst months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\nconst curMonth = months[objToday.getMonth()];\nconst curYear = objToday.getFullYear();\n\nconst today = dayOfWeek + \" \" + dayOfMonth + \" of \" + curMonth + \", \" + curYear;\n\n\n\n\nfunction App() {\n    const [toDos, setToDOS] = useState(toDosInit);\n\n    const [allTask,setAllTask] = useState(3);\n    const [todoTask,setTodoTask] = useState(2);\n    const [doneTask,setDoneTask] = useState(1);\n    const [filter, setFilter] = useState(0);\n\n    const updateNumberOfTask = (todoArray)=>{\n        setAllTask(todoArray.length);\n        let counterToDo = 0;\n        let counterDone = 0;\n        todoArray.map(el => {el.isDone === false ? counterToDo++:counterDone++});\n        setTodoTask(counterToDo);\n        setDoneTask(counterDone)\n        console.log(toDos);\n        console.log(allTask, todoTask, counterToDo, doneTask, counterDone);\n    }\n\n    const onTaskCeate = (task) => {\n        console.log(task);\n        const updatedTodos = [...toDos];\n        updatedTodos.push({id: Math.random(), name: task, isDone: false})\n        setToDOS(updatedTodos);\n        console.log(toDos);\n        updateNumberOfTask(updatedTodos);\n    }\n    const onTaskDelete = (id) => {\n        const updatedTodos = toDos.filter(el => el.id !== id);\n        setToDOS(updatedTodos);\n        updateNumberOfTask(updatedTodos);\n        console.log(toDos);\n    }\n    const onTaskDone = (id) => {\n        const updatedTodos = toDos.map(el => {\n            if (el.id === id) return {...el, isDone: !el.isDone}\n            else return el;\n        })\n        setToDOS(updatedTodos);\n        updateNumberOfTask(updatedTodos);\n        console.log(toDos);\n    }\n    const onTaskSave = (task) => {\n        const updatedTodos = toDos.map(el => {\n            if (el.id === task.id) return {...el.name = task.name};\n            else return el;\n        })\n    }\n    const onFilterClicked = (idFilter)=>{\n        setFilter(idFilter);\n    }\n\n    return (\n        <div class=\"container\">\n            <h1 class=\"c\">Todo List for {today}</h1>\n\n            <Form onTaskCeate={onTaskCeate} onFilterClicked = {onFilterClicked}/>\n            <List toDos={toDos} onTaskDelete={onTaskDelete} onTaskDone={onTaskDone} onTaskSave={onTaskSave} filter = {filter}/>\n            <Footer allTask={allTask} todoTask={todoTask} doneTask={doneTask}/>\n\n\n        </div>\n    );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}